var media = {};
var videoFilter = {
	urls: ["<all_urls>"],
	types : ["other", "object"]
};
chrome.tabs.onRemoved.addListener(clobberTab);

var block = true;
var tabId = -1;

function clobberTab(tabId) { delete media[tabId]; }

var VALID_CONTENT = [".mp4", ".flv", ".webm", ".m3u8"];

function containsASubstring(string, array) {
	for (var el in array) {
		if (string.indexOf(array[el]) !== -1) 
			return true;
	}
	return false;
}

function addVideoRequest(details) {
	//if (!containsASubstring(details.url, VALID_CONTENT))
	//	return;
	if (!media[details.tabId])
		media[details.tabId] = [];
	var bucket = media[details.tabId];
	for (var i = 0; i < bucket.length; i++) {
		if (bucket[i].url == details.url) 
			return;
		if (bucket[i].requestId === details.requestId) 
			return; // possible onBefore and then onCompleted double hit
	}
	bucket.push(details);
	console.log("adding ", details);
}

chrome.webRequest.onBeforeRequest.addListener(function(details) {
	if (block) return;
	addVideoRequest(details);
}, videoFilter);

chrome.webRequest.onCompleted.addListener(function(details){
	if (block) return;
	addVideoRequest(details);
}, videoFilter);

chrome.webRequest.onMessage.addListener(function(request, sender, sendResponse) {
	block = false;	
	setTimeout(function() {
		block = true;
	}, 250);
});

/*





chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
	if (request === "init") {
		clobberTab(sender.tab.id);
	}
});

*/